# Generated by Django 4.1.10 on 2023-10-04 07:17

from django.conf import settings
from django.db import migrations, models
from django.db.models import signals


def add_hydroperiod_and_wetland_indicator_status(apps, schema_editor):
    try:
        from easyaudit.signals.model_signals import post_save
        signals.post_save.disconnect(post_save, dispatch_uid='easy_audit_signals_post_save')
    except RuntimeError:
        pass
    Hydroperiod = apps.get_model('bims', 'Hydroperiod')
    WetlandIndicatorStatus = apps.get_model('bims', 'WetlandIndicatorStatus')

    wetland_data = [
        "Obligate wetland",
        "Facultative wetland",
        "Facultative",
        "Facultative dryland",
        "Dryland"
    ]

    hydroperiod_data = [
        "Inundated",
        "Saturated at surface",
        "Dry at surface"
    ]

    for index, wetland in enumerate(wetland_data):
        WetlandIndicatorStatus.objects.update_or_create(
            name=wetland,
            defaults={
                'order': index
            }
        )
    for index, hydroperiod in enumerate(hydroperiod_data):
        Hydroperiod.objects.update_or_create(
            name=hydroperiod,
            defaults={
                'order': index
            }
        )
    try:
        from easyaudit.signals.model_signals import post_save
        signals.post_save.connect(post_save, dispatch_uid='easy_audit_signals_post_save')
    except RuntimeError:
        pass


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('bims', '0357_remove_biologicalcollectionrecord_hydroperiod_and_more'),
    ]

    operations = [
        migrations.RenameField(
            model_name='biologicalcollectionrecord',
            old_name='hydroperiod_link',
            new_name='hydroperiod',
        ),
        migrations.RunPython(add_hydroperiod_and_wetland_indicator_status)
    ]
