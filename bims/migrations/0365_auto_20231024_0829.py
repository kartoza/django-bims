# Generated by Django 4.1.10 on 2023-10-24 07:40

from django.db import migrations

sampling_effort_measure_list = {}


def is_number(s):
    return s.replace(".", "", 1).isdigit() and s.count(".") <= 1


def link_sampling_effort_measure(apps, schema_editor):
    SamplingEffortMeasure = apps.get_model(
        'bims', 'SamplingEffortMeasure'
    )
    BiologicalCollectionRecord = apps.get_model('bims', 'BiologicalCollectionRecord')
    TaxonGroup = apps.get_model('bims', 'TaxonGroup')
    order = 0
    bio = list(
        BiologicalCollectionRecord.objects.filter(
            sampling_effort__isnull=False
        ).exclude(
            sampling_effort=''
        )
    )
    existing_sampling_measures = []
    for b in bio:
        sampling_effort = b.sampling_effort.split(' ')[-1]
        if not sampling_effort:
            continue
        if is_number(sampling_effort):
            continue
        if sampling_effort not in existing_sampling_measures:
            existing_sampling_measures.append(
                sampling_effort
            )
    algae = TaxonGroup.objects.filter(name__iexact='algae').first()
    for effort_measure in existing_sampling_measures:
        sampling_effort_name = ''
        taxon_group = None
        if 'min' in effort_measure.lower():
            sampling_effort_name = 'Time(min)'
        elif 'm2' in effort_measure.lower():
            sampling_effort_name = 'Area(m2)'
        elif 'square_metre' in effort_measure.lower():
            sampling_effort_name = 'Area(m2)'
        elif 'meter' in effort_measure.lower():
            sampling_effort_name = 'Area(m2)'
        elif 'replicates' in effort_measure.lower():
            if algae:
                taxon_group = algae
            sampling_effort_name = 'Replicates'
        elif 'throws' in effort_measure.lower():
            sampling_effort_name = 'Throws'
        if not sampling_effort_name:
            continue
        sampling_effort_measure, created = (
            SamplingEffortMeasure.objects.get_or_create(
                name=sampling_effort_name,
                specific_module=taxon_group,
                defaults={
                    'order': order
                }
            )
        )
        if created:
            order += 1
        BiologicalCollectionRecord.objects.filter(
            sampling_effort__icontains=effort_measure
        ).update(
            sampling_effort_link=sampling_effort_measure
        )

    if not existing_sampling_measures:
        SamplingEffortMeasure.objects.create(
            name='Time(min)',
            order=0,
        )
        SamplingEffortMeasure.objects.create(
            name='Area(m2)',
            order=1,
        )


class Migration(migrations.Migration):

    dependencies = [
        ('bims', '0364_alter_bimsdocument_authors_and_more'),
    ]

    operations = []
