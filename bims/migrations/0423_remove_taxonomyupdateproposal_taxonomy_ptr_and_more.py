# Generated by Django 4.2.11 on 2024-07-10 15:28

from django.conf import settings
from django.db import migrations, models, ProgrammingError, connection, DatabaseError, transaction
import django.db.models.deletion
import django.utils.timezone
import taggit.managers


def remove_duplicates(apps, schema_editor):
    try:
        with connection.cursor() as cursor:
            cursor.execute("""
                WITH cte AS (
                    SELECT id,
                           ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) as row_num
                    FROM bims_taxonomy
                )
                DELETE FROM bims_taxonomy
                WHERE id IN (
                    SELECT id
                    FROM cte
                    WHERE row_num > 1
                );
            """)
    except DatabaseError as e:
        print(e)
        transaction.set_rollback(True)
    except Exception as e:
        print(e)
        transaction.set_rollback(True)


def add_primary_key_constraint(apps, schema_editor):
    try:
        with connection.cursor() as cursor:
            # Check if the primary key constraint already exists
            cursor.execute("""
                SELECT COUNT(*)
                FROM pg_constraint
                WHERE conname = 'bims_taxonidentifier_pkey' AND conrelid = 'bims_taxonomy'::regclass;
            """)
            if cursor.fetchone()[0] == 0:
                # Add the primary key constraint if it does not exist
                cursor.execute("""
                    ALTER TABLE bims_taxonomy
                    ADD CONSTRAINT bims_taxonidentifier_pkey PRIMARY KEY (id);
                """)
    except ProgrammingError as e:
        print(e)
        pass  # If the primary key already exists, we just pass
    except DatabaseError as e:
        print(e)
        transaction.set_rollback(True)
    except Exception as e:
        print(e)
        transaction.set_rollback(True)

class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('sites', '0002_alter_domain_unique'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        ('bims', '0422_delete_old_taxonomy_update_proposal_table'),
    ]

    operations = [
        migrations.RunPython(remove_duplicates),
        migrations.RunPython(add_primary_key_constraint),
        migrations.CreateModel(
            name='TaxonomyUpdateProposal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taxonomy_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, serialize=False, to='bims.taxonomy')),
                ('status',
                 models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')],
                                  default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('original_taxonomy',
                 models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='proposals',
                                   to='bims.taxonomy', verbose_name='Original Taxonomy')),
                ('taxon_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                  to='bims.taxongroup')),
            ],
            options={
                'db_table': 'bims_taxonomy_update_proposal',
            },
        ),
        migrations.RemoveField(
            model_name='taxonomyupdateproposal',
            name='taxonomy_ptr',
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='accepted_taxonomy',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='taxonomy_update_proposal_accepted_taxonomy', to='bims.taxonomyupdateproposal'),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='accuracy_of_identification',
            field=models.IntegerField(default=0, help_text='Score for the accuracy of identification (0-100).'),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='accuracy_of_locality',
            field=models.IntegerField(default=0, help_text='Score for the accuracy of locality information (0-100).'),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='additional_data',
            field=models.JSONField(blank=True, null=True, verbose_name='Additional json data'),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='analyst',
            field=models.ForeignKey(blank=True, help_text='The person that did the analysis', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_analyst', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='author',
            field=models.CharField(blank=True, max_length=200, null=True, verbose_name='Author'),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='biographic_distributions',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='bims.CustomTaggedTaxonomy', to='bims.TaxonTag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='canonical_name',
            field=models.CharField(blank=True, max_length=200, null=True, verbose_name='Canonical Name'),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='collector_user',
            field=models.ForeignKey(blank=True, help_text='The user object of the actual capturer/collector of this data', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_collector_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='end_embargo_date',
            field=models.DateField(blank=True, help_text='The date when the embargo on the data expires. After this date, the data will become public.', null=True),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='endemism',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_endemism', to='bims.endemism', verbose_name='Endemism'),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='gbif_data',
            field=models.JSONField(blank=True, null=True, verbose_name='Json data from gbif'),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='gbif_key',
            field=models.IntegerField(blank=True, null=True, verbose_name='GBIF Key'),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='hierarchical_data',
            field=models.JSONField(blank=True, null=True, verbose_name='Hierarchical Data'),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='import_date',
            field=models.DateField(blank=True, default=django.utils.timezone.now, null=True),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='iucn_data',
            field=models.TextField(blank=True, null=True, verbose_name='Data from IUCN'),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='iucn_redlist_id',
            field=models.IntegerField(blank=True, null=True, verbose_name='IUCN taxon id'),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='iucn_status',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_iucn_status', to='bims.iucnstatus', verbose_name='Global Red List Status (IUCN)'),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='legacy_canonical_name',
            field=models.CharField(blank=True, default='', max_length=700, verbose_name='Legacy Canonical Name'),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='national_conservation_status',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_national_conservation_status', to='bims.iucnstatus', verbose_name='National Conservation Status'),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='origin',
            field=models.CharField(blank=True, choices=[('non-native', 'Non-Native'), ('native', 'Native'), ('unknown', 'Unknown'), ('non-native: invasive', 'Non-native: invasive'), ('non-native: non-invasive', 'Non-native: non-invasive')], default='', help_text='Origin', max_length=50),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='taxonomy_proposal_owner', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_parent', to='bims.taxonomyupdateproposal', verbose_name='Parent'),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='rank',
            field=models.CharField(blank=True, choices=[('SUBSPECIES', 'Sub Species'), ('SPECIES', 'Species'), ('GENUS', 'Genus'), ('SUBGENUS', 'Sub Genus'), ('FAMILY', 'Family'), ('SUPERFAMILY', 'Super Family'), ('ORDER', 'Order'), ('CLASS', 'Class'), ('SUBCLASS', 'Sub Class'), ('PHYLUM', 'Phylum'), ('SUBPHYLUM', 'SubPhylum'), ('KINGDOM', 'Kingdom'), ('DOMAIN', 'Domain'), ('SUBORDER', 'Sub Order'), ('INFRAORDER', 'Infra Order'), ('SUBFAMILY', 'Sub Family'), ('VARIETY', 'Variety'), ('FORMA', 'Forma'), ('TRIBE', 'Tribe'), ('SUBTRIBE', 'Sub Tribe')], max_length=50, verbose_name='Taxonomic Rank'),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='ready_for_validation',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='rejected',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='reliability_of_sources',
            field=models.IntegerField(default=0, help_text='Score for the reliability of the sources (0-100).'),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='scientific_name',
            field=models.CharField(default=1, max_length=200, verbose_name='Scientific Name'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='source_site',
            field=models.ForeignKey(blank=True, help_text='The site this record is associated with.', null=True, on_delete=django.db.models.deletion.CASCADE, to='sites.site', verbose_name='Associated Site'),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='taxonomic_status',
            field=models.CharField(blank=True, choices=[('ACCEPTED', 'Accepted'), ('DOUBTFUL', 'Doubtful'), ('SYNONYM', 'Synonym'), ('HETEROTYPIC_SYNONYM', 'Heterotypic Synonym'), ('HOMOTYPIC_SYNONYM', 'Homotypic Synonym'), ('PROPARTE_SYNONYM', 'Proparte Synonym'), ('MISAPPLIED', 'Misapplied')], max_length=50, verbose_name='Taxonomic Status'),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='validated',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='validation_message',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='verified',
            field=models.BooleanField(default=False, help_text='The data has been verified'),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='vernacular_names',
            field=models.ManyToManyField(blank=True, related_name='%(class)s_vernacular_names', to='bims.vernacularname'),
        ),
        migrations.AlterField(
            model_name='downloadrequest',
            name='resource_type',
            field=models.CharField(choices=[('CSV', 'Csv'), ('XLS', 'Xls'), ('CHART', 'Chart'), ('TABLE', 'Table'), ('IMAGE', 'Image'), ('PDF', 'Pdf')], default='CSV', max_length=10),
        ),
        migrations.AlterField(
            model_name='sitesetting',
            name='site_code_generator',
            field=models.CharField(blank=True, choices=[('bims', 'BIMS (2 Site Name + 2 Site Description + Site count)'), ('fbis', 'FBIS (2 Secondary catchment + 4 River + Site count)'), ('rbis', 'RBIS (Catchment + Province ID + District ID + Site count)'), ('sanparks', 'SANPARKS (1st three park name + site count)')], default='bims', help_text='How site code generated', max_length=50),
        ),
        migrations.AlterField(
            model_name='taxonomy',
            name='origin',
            field=models.CharField(blank=True, choices=[('non-native', 'Non-Native'), ('native', 'Native'), ('unknown', 'Unknown'), ('non-native: invasive', 'Non-native: invasive'), ('non-native: non-invasive', 'Non-native: non-invasive')], default='', help_text='Origin', max_length=50),
        ),
        migrations.AddField(
            model_name='taxonomyupdateproposal',
            name='reviewers',
            field=models.ManyToManyField(blank=True, related_name='taxonomy_update_proposals_reviewers', through='bims.TaxonomyUpdateReviewer', to=settings.AUTH_USER_MODEL),
        ),
    ]
